import logging
import re
import asyncio
from collections import defaultdict
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import CommandStart
from aiogram.utils import executor
import os

API_TOKEN = os.getenv("API_TOKEN")

if not API_TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ—ë –≤ Railway –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ.")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_warnings = defaultdict(int)

bad_words = ['–±–ª—è—Ç—å', '—Å—É–∫–∞', '–Ω–∞—Ö—É–π', '–µ–±–∞—Ç—å', '–ø–∏–∑–¥–∞', '—Ö—É–π', '–≥–∞–Ω–¥–æ–Ω', '–º—Ä–∞–∑—å', '–¥–∞—É–Ω']

def contains_link(text):
    return bool(re.search(r"(http[s]?://|t\.me/|@\w+|\w+\.\w{2,})", text))

@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_messages(message: types.Message):
    if message.chat.type not in ["group", "supergroup"]:
        return

    text = message.text.lower()
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.full_name

    if contains_link(text):
        try:
            await message.delete()
            await bot.kick_chat_member(chat_id, user_id)
            await message.answer(f"üö´ {username} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Å—ã–ª–æ–∫.")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –∑–∞ —Å—Å—ã–ª–∫—É: {e}")
        return

    if any(word in text for word in bad_words):
        user_warnings[user_id] += 1
        await message.delete()

        if user_warnings[user_id] >= 3:
            try:
                await bot.kick_chat_member(chat_id, user_id)
                await message.answer(f"üí• {username} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–º–∞—Ç).")
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")
        else:
            await message.answer(f"‚ö†Ô∏è {username}, –Ω–µ –º–∞—Ç–µ—Ä–∏—Å—å! –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {user_warnings[user_id]}/3")

@dp.message_handler(CommandStart())
async def start_cmd(message: types.Message):
    await message.reply("ü§ñ –ü–µ—á –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —Å—Ç—Ä–∞–∂–µ –ø–æ—Ä—è–¥–∫–∞! –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –≤—ã–¥–∞–π –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
